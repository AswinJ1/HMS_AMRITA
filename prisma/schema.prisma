generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  uid       String?   @unique
  password  String
  role      Role
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  admin     Admin?
  hostel    Hostel?
  security  Security?
  staff     Staff?
  student   Student?
  teamLead  TeamLead?

  @@index([email])
  @@index([uid])
}

model Admin {
  id        String   @id @default(cuid())
  userId    String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  avatarUrl String?
  gender    String   @default("male")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Student {
  id               String            @id @default(cuid())
  userId           String            @unique
  name             String
  clubName         String
  hostelName       String
  roomNo           String
  phoneNumber      String
  isTeamLead       Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  avatarUrl        String?
  gender           String            @default("male")
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  staybackRequests StaybackRequest[]

  @@index([clubName])
  @@index([hostelName])
}

model Staff {
  id         String             @id @default(cuid())
  userId     String             @unique
  name       String
  department String?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  avatarUrl  String?
  gender     String             @default("male")
  user       User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  approvals  StaybackApproval[]
}

model Hostel {
  id         String             @id @default(cuid())
  userId     String             @unique
  name       String
  hostelName String
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  avatarUrl  String?
  gender     String             @default("male")
  user       User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  approvals  StaybackApproval[]
}

model Security {
  id         String   @id @default(cuid())
  userId     String   @unique
  name       String
  department String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  avatarUrl  String?
  gender     String   @default("male")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TeamLead {
  id         String             @id @default(cuid())
  userId     String             @unique
  name       String
  clubName   String
  department String?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  avatarUrl  String?
  gender     String             @default("male")
  approvals  StaybackApproval[]
  user       User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([clubName])
}

model StaybackRequest {
  id        String             @id @default(cuid())
  studentId String
  clubName  String
  date      DateTime
  fromTime  String
  toTime    String
  remarks   String
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  status    RequestStatus      @default(PENDING)
  approvals StaybackApproval[]
  student   Student            @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("stayback_requests")
}

model StaybackApproval {
  id                String          @id @default(cuid())
  requestId         String
  staffId           String?
  hostelId          String?
  teamLeadId        String?
  status            ApprovalStatus  @default(PENDING)
  comments          String?
  approvedAt        DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  securityCheckedAt DateTime?
  securityCheckedBy String?
  securityStatus    String?
  hostel            Hostel?         @relation(fields: [hostelId], references: [id])
  request           StaybackRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  staff             Staff?          @relation(fields: [staffId], references: [id])
  teamLead          TeamLead?       @relation(fields: [teamLeadId], references: [id])

  @@unique([requestId, staffId])
  @@unique([requestId, hostelId])
  @@unique([requestId, teamLeadId])
  @@index([requestId])
  @@index([status])
}

enum Role {
  ADMIN
  STAFF
  STUDENT
  TEAM_LEAD
  HOSTEL
  SECURITY
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}
